using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.ServiceProcess;
using System.Text;
using System.Threading.Tasks;
using System.Timers;
using System.Threading;
using Tulpep.NotificationWindow;
using System.Runtime.InteropServices;

namespace lab2._4
{
    public partial class Service1 : ServiceBase
    {
        System.Timers.Timer timer = new System.Timers.Timer();
        public Service1()
        {
            InitializeComponent();
        }

        [DllImport("wtsapi32.dll", SetLastError = true)]
        static extern bool WTSSendMessage(
            IntPtr hServer,
            [MarshalAs(UnmanagedType.I4)] int SessionId,
            String pTitle,
            [MarshalAs(UnmanagedType.U4)] int TitleLength,
            String pMessage,
            [MarshalAs(UnmanagedType.U4)] int MessageLength,
            [MarshalAs(UnmanagedType.U4)] int Style,
            [MarshalAs(UnmanagedType.U4)] int Timeout,
            [MarshalAs(UnmanagedType.U4)] out int pResponse,
            bool bWait);

        public static IntPtr WTS_CURRENT_SERVER_HANDLE = IntPtr.Zero;
        public static int WTS_CURRENT_SESSION = 1;

        protected override void OnStart(string[] args)
        {
            WriteToFile("Service is started at " + DateTime.Now);
            timer.Elapsed += new ElapsedEventHandler(showpopup);
            timer.Interval = 5000; //number in milisecinds
            timer.Enabled = true;
        }

        protected override void OnStop()
        {
            WriteToFile("Service is stopped at " + DateTime.Now);
        }
        private void showpopup(object source, ElapsedEventArgs e)
        {
            EventLog log = new EventLog();
            log.Log = "Security";
            
            foreach(EventLogEntry entry in log.Entries)
            {
                if(entry.EventID==4624 || entry.EventID==4672)
                {
                    if (DateTime.Now.Day == entry.TimeGenerated.Day && DateTime.Now.Month == entry.TimeGenerated.Month&&
                        DateTime.Now.Year == entry.TimeGenerated.Year&& DateTime.Now.Hour == entry.TimeGenerated.Hour)
                    {
                        int timenow = DateTime.Now.Minute * 60 + DateTime.Now.Second;
                        int timeevent = entry.TimeGenerated.Minute * 60 + entry.TimeGenerated.Second;
                       
                        if ((timenow - timeevent) < 9)
                        {
                            WriteToFile("Show popup at " + DateTime.Now);
                            /*PopupNotifier popup = new PopupNotifier();
                            popup.TitleText = "Hello";
                            popup.ContentText= "18520532 && 18521544";
                            popup.Popup();*/

                            for (int user_session = 10; user_session > 0; user_session--)
                            {
                                Thread t = new Thread(() => {
                                    try
                                    {
                                        bool result = false;
                                        String title = "Welcome!!!";
                                        int tlen = title.Length;
                                        String msg = "18520532 && 18521544";
                                        int mlen = msg.Length;
                                        int resp = 7;
                                        result = WTSSendMessage(WTS_CURRENT_SERVER_HANDLE, user_session, title, tlen, msg, mlen, 4, 0, out resp, true);
                                        int err = Marshal.GetLastWin32Error();
                                        if (err == 0)
                                        {
                                            if (result) //user responded to box
                                            {
                                                if (resp == 7) //user clicked no
                                                {

                                                }
                                                else if (resp == 6) //user clicked yes
                                                {

                                                }
                                                Debug.WriteLine("user_session:" + user_session + " err:" + err + " resp:" + resp);
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        Debug.WriteLine("no such thread exists", ex);
                                    }
                                    //Application App = new Application();
                                    //App.Run(new MessageForm());
                                });
                                t.SetApartmentState(ApartmentState.STA);
                                t.Start();
                            }

                            break;
                        }
                    }
                }
                
            }

            
            Process DProcess = new Process();
            string command = "msg * hello";

            System.Diagnostics.Process.Start("CMD.exe", command);
        }
        //
        public void WriteToFile(string Message)
        {
            string path = AppDomain.CurrentDomain.BaseDirectory + "\\Logs";
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }
            string filepath = AppDomain.CurrentDomain.BaseDirectory +
           "\\Logs\\ServiceLog_" + DateTime.Now.Date.ToShortDateString().Replace('/', '_') +
           ".txt";
            if (!File.Exists(filepath))
            {
                // Create a file to write to.
                using (StreamWriter sw = File.CreateText(filepath))
                {
                    sw.WriteLine(Message);
                }
            }
            else
            {
                using (StreamWriter sw = File.AppendText(filepath))
                {
                    sw.WriteLine(Message);
                }
            }
        }
    }
}
